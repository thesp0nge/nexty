#!/usr/bin/env ruby

class String
  def starts_with?(pattern)
    ! self.match(/^#{pattern}/).nil?
  end
end

class Numeric
  def duration
    secs  = self.to_int
    mins  = secs / 60
    hours = mins / 60
    days  = hours / 24

    return "#{days} days and #{hours % 24} hours" if days > 0
    return "#{hours} hours and #{mins % 60} minutes" if days == 0 and hours > 0
    return "#{mins} minutes and #{secs % 60} seconds" if days == 0 and hours == 0 and mins > 0
    return "#{secs} seconds" if days == 0 and hours == 0 and mins == 0
  end
end

if RUBY_VERSION.split('.')[1] == "8"
require 'rubygems'
end

require 'time'
require 'rainbow'
require 'nexpose'
require 'nexty'
require 'getoptlong'
require 'csv'
require 'time'

opts = GetoptLong.new(
  [ '--report', '-r', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--host', '-H', GetoptLong::REQUIRED_ARGUMENT ], 
  [ '--bulk-load', '-l', GetoptLong::NO_ARGUMENT ],
  [ '--full-export', '-f', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--download', '-d', GetoptLong::REQUIRED_ARGUMENT ], 
  [ '--schedule', '-s', GetoptLong::OPTIONAL_ARGUMENT ]
)

include Nexpose


trap("INT") { puts '['+'INTERRUPTED'.color(:red)+']'; exit -1 }


# templates = nsc.report_template_listing
# 
# templates.each do |template|
#   p template[:template_id]
# end

conn = Nexty::Connector.new
nsc = conn.nsc

begin 
  printf "Connecting to #{conn.config["config"]["host"]}:#{conn.config["config"]["port"]} - ".color(:white)
  nsc.login
rescue ::Nexpose::APIError => e
  printf "failed\n".color(:red)
  $stderr.puts("#{e.reason}")
  exit(1)
end
printf "succeded\n".color(:green)

bulk_load = false

opts.each do |opt, arg|
  case opt
  when '--schedule'
     # site.schedules

     sites = nsc.find_site_by_name(arg) unless arg.empty?
     sites = nsc.site_listing if arg.empty? 
     puts "site, type, interval, day of week, start, scan executed, mean scan time, enabled, forced"
     sites.each do |site|
       s = Site.load(nsc, site[:site_id])
       history = nsc.site_scan_history(site[:site_id])

       elapse = 0 
       items = 0

       history.each do |h|
         t0 = Time.parse(h[:start_time])
         t1 = Time.parse(h[:end_time])
         elapse += (t1-t0)
         items += 1
       end

       forced = false
       
       s.schedules.each do |schedule|
         t = Time.parse(schedule.start)
         puts t.wday
         forced = true if t.hour >= 21
         puts "#{site[:name]},#{schedule.type},#{schedule.interval}, #{t.wday}, #{t.hour}:#{t.min}:#{t.sec}, #{history.size}, #{(elapse) / (3600.0 * items)}, #{schedule.enabled}, #{forced}"
       end

     end
  when '--bulk-load' 
    bulk_load = true

  when '--download'

    file_name = "export_#{Time.now.strftime("%Y%m%d%H%M%s")}.csv"
    puts "Report saved: #{Nexty::Report.download(arg, file_name, nsc)}".color(:white)

  when '--full-export'

    fn = Nexty::Report.generate_from_a_template(arg, nsc)
    file_name = "export_#{Time.now.strftime("%Y%m%d%H%M%s")}.csv"
    nsc.logout
    begin 
      printf "Connecting to #{conn.config["config"]["host"]}:#{conn.config["config"]["port"]} - ".color(:white)
      nsc.login
    rescue ::Nexpose::APIError => e
      printf "failed\n".color(:red)
      $stderr.puts("#{e.reason}")
      exit(1)
    end
    printf "succeded\n".color(:green)

    puts "Report saved: #{Nexty::Report.download(fn, file_name, nsc)}".color(:white)

  when '--report'
    fn = Nexty::Report.generate_from_a_list_of_sites({:site_list=>arg, :template=>conn.config["report"]["template"]}, nsc)
    puts "Report saved: #{fn}".color(:white)

  when '--host'

    if ! bulk_load
      dev= Nexty::Device.find_by_address(nsc, arg)
      if ! dev.nil? 
        puts "#{dev.address} found @ site #{dev.site_id}. Risk score = #{dev.riskscore} * #{dev.riskfactor}".color(:green)
      else
        puts "#{arg} not found".color(:red)
      end
    else
      lines = []

      lines = File.open(arg).readlines if File.exists?(arg)
      puts "#{lines.count} hosts read from #{arg}".color(:white)

      lines.each do |l|
        dev= Nexty::Device.find_by_address(nsc, l.chomp)
        if ! dev.nil? 
          puts "#{dev.address} found @ site #{dev.site_id}. Risk score = #{dev.riskscore} * #{dev.riskfactor}".color(:green)
        else
          puts "#{l.chomp} not found".color(:red)
        end
      end
    end
  end
end


nsc.logout
